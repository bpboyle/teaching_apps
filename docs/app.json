[{"name":"app.R","content":"library(shiny)\r\nlibrary(ggplot2)\r\nlibrary(patchwork)\r\nlibrary(dplyr)\r\n\r\n\r\n\r\n\r\n\r\n\r\n# Define UI for app that draws a histogram ----\r\nui <- fluidPage(\r\n  \r\n  # App title ----\r\n  titlePanel(\"Simple random sampling\"),\r\n  \r\n  # Sidebar layout with input and output definitions ----\r\n  sidebarLayout(\r\n    \r\n    # Sidebar panel for inputs ----\r\n    sidebarPanel(\r\n      # sliderInput(inputId = \"sample_n\",\r\n      #             label = \"Sample size:\",\r\n      #             min = 0,\r\n      #             max = 1000,\r\n      #             value = 0, step = 1, ticks = T),\r\n      \r\n      numericInput(inputId = 'sample_n', label = 'Sample size', value = 0, min = 0, max = 10000, step = NA)  \r\n      \r\n    ),\r\n    \r\n    # Main panel for displaying outputs ----\r\n    mainPanel(\r\n      \r\n      p(\"Population = 100,000\"),\r\n      textOutput(\"sample_n_text\"),\r\n      \r\n      # Output: Histogram ----\r\n      plotOutput(outputId = \"samplePlot\")\r\n      \r\n    )\r\n  )\r\n)\r\n\r\n# Define server logic required to draw a histogram ----\r\nserver <- function(input, output) {\r\n  \r\n  # Histogram of the Old Faithful Geyser Data ----\r\n  # with requested number of bins\r\n  # This expression that generates a histogram is wrapped in a call\r\n  # to renderPlot to indicate that:\r\n  #\r\n  # 1. It is \"reactive\" and therefore should be automatically\r\n  #    re-executed when inputs (input$bins) change\r\n  # 2. Its output type is a plot\r\n  \r\n  output$sample_n_text <- renderText({ \r\n    paste(\"Sample size =\", input$sample_n)\r\n  })\r\n  \r\n  \r\n  \r\n  output$samplePlot <- renderPlot({\r\n  \r\n  set.seed(2017)  \r\n  groups <- letters[1:5] |> toupper()\r\n  pop <- sample(groups, 100000, replace = T, prob = c(.2, .3, .05, .1, .4))\r\n  pop_df <- table(pop) |> as.data.frame()\r\n  \r\n  pop_plot <- pop_df |> \r\n  ggplot(aes(x = pop, y = Freq, fill = factor(pop))) +\r\n  geom_col() +\r\n    theme_minimal() +\r\n    scale_fill_manual(values = c('#E69F00','#56B4E9','#CC79A7','#009E73','#D55E00')) +\r\n    theme(panel.grid.minor = element_blank(),\r\n          panel.grid.major.x = element_blank(),\r\n          text = element_text(size = 16)) +\r\n    guides(fill = 'none') +\r\n    labs(x = 'Group', y = 'Count', title = 'Population')\r\n  ###\r\n  sample_n <- input$sample_n\r\n  if(is.na(sample_n)){\r\n    sample_n <- 0\r\n  }\r\n  \r\n  \r\n  sample <- sample(pop, sample_n)\r\n  sample_df <- table(sample) |> as.data.frame()\r\n  \r\n  \r\n  sample_fill <- data.frame(sample = groups, Freq = 0)\r\n  sample_expand <- sample_fill[which(!groups %in% sample_df$sample),]\r\n  \r\n  if(dim(sample_expand)[1] > 0){\r\n     sample_df <- rbind(sample_df, sample_expand)  \r\n  }\r\n  \r\n  sample_df$sample <- factor(sample_df$sample, levels = letters[1:5] |> toupper())\r\n  \r\n  \r\n  \r\n  \r\n  sample_plot <- sample_df |> \r\n    ggplot(aes(x = sample, y = Freq, fill = factor(sample))) +\r\n    geom_col() +\r\n    theme_minimal() +\r\n    scale_fill_manual(values = c('#E69F00','#56B4E9','#CC79A7','#009E73','#D55E00')) +\r\n    theme(panel.grid.minor = element_blank(),\r\n          panel.grid.major.x = element_blank(),\r\n          text = element_text(size = 16)) +\r\n    guides(fill = 'none') +\r\n    labs(x = 'Group', y = 'Count', title = 'Sample')\r\n  \r\n  \r\n  \r\n\r\n\r\n  \r\n  if(sample_n == 0){\r\n    sample_plot <- sample_plot + theme_void()\r\n  } \r\n  \r\n  pop_plot + sample_plot\r\n  \r\n  \r\n  \r\n    \r\n  })\r\n  \r\n}\r\n\r\n# Create Shiny app ----\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
